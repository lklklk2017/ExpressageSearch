package com.cdxxgc.expressagesearchdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cdxxgc.expressagesearchdemo.entity.Recorde;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDE".
*/
public class RecordeDao extends AbstractDao<Recorde, Long> {

    public static final String TABLENAME = "RECORDE";

    /**
     * Properties of entity Recorde.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LogisticCode = new Property(0, long.class, "LogisticCode", true, "_id");
        public final static Property CompName = new Property(1, String.class, "compName", false, "t_comName");
        public final static Property Res_imgId = new Property(2, int.class, "res_imgId", false, "t_imgId");
        public final static Property ComTel = new Property(3, String.class, "ComTel", false, "t_comTel");
        public final static Property LastAcceptStation = new Property(4, String.class, "lastAcceptStation", false, "t_lastState");
        public final static Property LastAcceptTime = new Property(5, String.class, "lastAcceptTime", false, "t_lastTime");
        public final static Property ComCode = new Property(6, String.class, "ComCode", false, "t_comCode");
    };


    public RecordeDao(DaoConfig config) {
        super(config);
    }
    
    public RecordeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: LogisticCode
                "\"t_comName\" TEXT NOT NULL ," + // 1: compName
                "\"t_imgId\" INTEGER NOT NULL ," + // 2: res_imgId
                "\"t_comTel\" TEXT NOT NULL ," + // 3: ComTel
                "\"t_lastState\" TEXT NOT NULL ," + // 4: lastAcceptStation
                "\"t_lastTime\" TEXT NOT NULL ," + // 5: lastAcceptTime
                "\"t_comCode\" TEXT NOT NULL );"); // 6: ComCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Recorde entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLogisticCode());
        stmt.bindString(2, entity.getCompName());
        stmt.bindLong(3, entity.getRes_imgId());
        stmt.bindString(4, entity.getComTel());
        stmt.bindString(5, entity.getLastAcceptStation());
        stmt.bindString(6, entity.getLastAcceptTime());
        stmt.bindString(7, entity.getComCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Recorde entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLogisticCode());
        stmt.bindString(2, entity.getCompName());
        stmt.bindLong(3, entity.getRes_imgId());
        stmt.bindString(4, entity.getComTel());
        stmt.bindString(5, entity.getLastAcceptStation());
        stmt.bindString(6, entity.getLastAcceptTime());
        stmt.bindString(7, entity.getComCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Recorde readEntity(Cursor cursor, int offset) {
        Recorde entity = new Recorde( //
            cursor.getLong(offset + 0), // LogisticCode
            cursor.getString(offset + 1), // compName
            cursor.getInt(offset + 2), // res_imgId
            cursor.getString(offset + 3), // ComTel
            cursor.getString(offset + 4), // lastAcceptStation
            cursor.getString(offset + 5), // lastAcceptTime
            cursor.getString(offset + 6) // ComCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Recorde entity, int offset) {
        entity.setLogisticCode(cursor.getLong(offset + 0));
        entity.setCompName(cursor.getString(offset + 1));
        entity.setRes_imgId(cursor.getInt(offset + 2));
        entity.setComTel(cursor.getString(offset + 3));
        entity.setLastAcceptStation(cursor.getString(offset + 4));
        entity.setLastAcceptTime(cursor.getString(offset + 5));
        entity.setComCode(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Recorde entity, long rowId) {
        entity.setLogisticCode(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Recorde entity) {
        if(entity != null) {
            return entity.getLogisticCode();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
